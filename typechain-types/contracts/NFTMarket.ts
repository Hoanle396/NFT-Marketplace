/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace NFTMarket {
  export type MarketItemStruct = {
    itemId: BigNumberish;
    nftContract: AddressLike;
    tokenId: BigNumberish;
    seller: AddressLike;
    owner: AddressLike;
    price: BigNumberish;
    sold: boolean;
  };

  export type MarketItemStructOutput = [
    itemId: bigint,
    nftContract: string,
    tokenId: bigint,
    seller: string,
    owner: string,
    price: bigint,
    sold: boolean
  ] & {
    itemId: bigint;
    nftContract: string;
    tokenId: bigint;
    seller: string;
    owner: string;
    price: bigint;
    sold: boolean;
  };
}

export interface NFTMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createMarketItem"
      | "createMarketSale"
      | "fetchMarketItems"
      | "fetchMyNFTs"
      | "getListingPrice"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MarketItemCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createMarketItem",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketSale",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMyNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListingPrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingPrice",
    data: BytesLike
  ): Result;
}

export namespace MarketItemCreatedEvent {
  export type InputTuple = [
    itemId: BigNumberish,
    nftContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    owner: AddressLike,
    price: BigNumberish,
    sold: boolean
  ];
  export type OutputTuple = [
    itemId: bigint,
    nftContract: string,
    tokenId: bigint,
    seller: string,
    owner: string,
    price: bigint,
    sold: boolean
  ];
  export interface OutputObject {
    itemId: bigint;
    nftContract: string;
    tokenId: bigint;
    seller: string;
    owner: string;
    price: bigint;
    sold: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTMarket extends BaseContract {
  connect(runner?: ContractRunner | null): NFTMarket;
  waitForDeployment(): Promise<this>;

  interface: NFTMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createMarketItem: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "payable"
  >;

  createMarketSale: TypedContractMethod<
    [nftContract: AddressLike, itemId: BigNumberish],
    [void],
    "payable"
  >;

  fetchMarketItems: TypedContractMethod<
    [],
    [NFTMarket.MarketItemStructOutput[]],
    "view"
  >;

  fetchMyNFTs: TypedContractMethod<
    [],
    [NFTMarket.MarketItemStructOutput[]],
    "view"
  >;

  getListingPrice: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createMarketItem"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createMarketSale"
  ): TypedContractMethod<
    [nftContract: AddressLike, itemId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fetchMarketItems"
  ): TypedContractMethod<[], [NFTMarket.MarketItemStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "fetchMyNFTs"
  ): TypedContractMethod<[], [NFTMarket.MarketItemStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getListingPrice"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "MarketItemCreated"
  ): TypedContractEvent<
    MarketItemCreatedEvent.InputTuple,
    MarketItemCreatedEvent.OutputTuple,
    MarketItemCreatedEvent.OutputObject
  >;

  filters: {
    "MarketItemCreated(uint256,address,uint256,address,address,uint256,bool)": TypedContractEvent<
      MarketItemCreatedEvent.InputTuple,
      MarketItemCreatedEvent.OutputTuple,
      MarketItemCreatedEvent.OutputObject
    >;
    MarketItemCreated: TypedContractEvent<
      MarketItemCreatedEvent.InputTuple,
      MarketItemCreatedEvent.OutputTuple,
      MarketItemCreatedEvent.OutputObject
    >;
  };
}
