/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { NFTMarket, NFTMarketInterface } from "../../contracts/NFTMarket";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "sold",
        type: "bool",
      },
    ],
    name: "MarketItemCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createMarketItem",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "itemId",
        type: "uint256",
      },
    ],
    name: "createMarketSale",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fetchMarketItems",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fetchMyNFTs",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "itemId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "sold",
            type: "bool",
          },
        ],
        internalType: "struct NFTMarket.MarketItem[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getListingPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600060045534801561001557600080fd5b50600160008190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506114d28061006e6000396000f3fe60806040526004361061004a5760003560e01c80630f08efe01461004f57806312e855851461007a578063202e3740146100a557806358eb2df5146100d0578063c23b139e146100ec575b600080fd5b34801561005b57600080fd5b50610064610108565b6040516100719190610f7c565b60405180910390f35b34801561008657600080fd5b5061008f6103cb565b60405161009c9190610fad565b60405180910390f35b3480156100b157600080fd5b506100ba6103d5565b6040516100c79190610f7c565b60405180910390f35b6100ea60048036038101906100e59190611025565b61071b565b005b61010660048036038101906101019190611078565b610aa3565b005b606060006101166001610cab565b905060006101246002610cab565b61012e6001610cab565b61013891906110e7565b90506000808267ffffffffffffffff8111156101575761015661111b565b5b60405190808252806020026020018201604052801561019057816020015b61017d610d28565b8152602001906001900390816101755790505b50905060005b848110156103c057600073ffffffffffffffffffffffffffffffffffffffff16600560006001846101c7919061114a565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036103ad57600060056000600184610227919061114a565b81526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508385815181106103915761039061117e565b5b60200260200101819052506001846103a9919061114a565b9350505b80806103b8906111ad565b915050610196565b508094505050505090565b6000600454905090565b606060006103e36001610cab565b905060008060005b8381101561048b573373ffffffffffffffffffffffffffffffffffffffff166005600060018461041b919061114a565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361047857600183610475919061114a565b92505b8080610483906111ad565b9150506103eb565b5060008267ffffffffffffffff8111156104a8576104a761111b565b5b6040519080825280602002602001820160405280156104e157816020015b6104ce610d28565b8152602001906001900390816104c65790505b50905060005b84811015610710573373ffffffffffffffffffffffffffffffffffffffff1660056000600184610517919061114a565b815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106fd57600060056000600184610577919061114a565b81526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900460ff1615151515815250508385815181106106e1576106e061117e565b5b60200260200101819052506001846106f9919061114a565b9350505b8080610708906111ad565b9150506104e7565b508094505050505090565b610723610cb9565b6000811015610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e90611252565b60405180910390fd5b60045434146107ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a2906112e4565b60405180910390fd5b6107b56001610d08565b60006107c16001610cab565b90506040518060e001604052808281526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815250600560008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016109a293929190611313565b600060405180830381600087803b1580156109bc57600080fd5b505af11580156109d0573d6000803e3d6000fd5b50505050828473ffffffffffffffffffffffffffffffffffffffff16827f045dfa01dcba2b36aba1d3dc4a874f4b0c5d2fbeb8d2c4b34a7d88c8d8f929d1336000876000604051610a249493929190611359565b60405180910390a4600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610a94573d6000803e3d6000fd5b5050610a9e610d1e565b505050565b610aab610cb9565b600060056000838152602001908152602001600020600501549050600060056000848152602001908152602001600020600201549050813414610b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1a90611410565b60405180910390fd5b6005600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610b9f573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b8152600401610bdd93929190611313565b600060405180830381600087803b158015610bf757600080fd5b505af1158015610c0b573d6000803e3d6000fd5b50505050336005600085815260200190815260200160002060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600085815260200190815260200160002060060160006101000a81548160ff021916908315150217905550610c9d6002610d08565b5050610ca7610d1e565b5050565b600081600001549050919050565b600260005403610cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf59061147c565b60405180910390fd5b6002600081905550565b6001816000016000828254019250508190555050565b6001600081905550565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610de881610dd5565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e1982610dee565b9050919050565b610e2981610e0e565b82525050565b6000610e3a82610dee565b9050919050565b610e4a81610e2f565b82525050565b60008115159050919050565b610e6581610e50565b82525050565b60e082016000820151610e816000850182610ddf565b506020820151610e946020850182610e20565b506040820151610ea76040850182610ddf565b506060820151610eba6060850182610e41565b506080820151610ecd6080850182610e41565b5060a0820151610ee060a0850182610ddf565b5060c0820151610ef360c0850182610e5c565b50505050565b6000610f058383610e6b565b60e08301905092915050565b6000602082019050919050565b6000610f2982610da9565b610f338185610db4565b9350610f3e83610dc5565b8060005b83811015610f6f578151610f568882610ef9565b9750610f6183610f11565b925050600181019050610f42565b5085935050505092915050565b60006020820190508181036000830152610f968184610f1e565b905092915050565b610fa781610dd5565b82525050565b6000602082019050610fc26000830184610f9e565b92915050565b600080fd5b610fd681610e0e565b8114610fe157600080fd5b50565b600081359050610ff381610fcd565b92915050565b61100281610dd5565b811461100d57600080fd5b50565b60008135905061101f81610ff9565b92915050565b60008060006060848603121561103e5761103d610fc8565b5b600061104c86828701610fe4565b935050602061105d86828701611010565b925050604061106e86828701611010565b9150509250925092565b6000806040838503121561108f5761108e610fc8565b5b600061109d85828601610fe4565b92505060206110ae85828601611010565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110f282610dd5565b91506110fd83610dd5565b9250828203905081811115611115576111146110b8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061115582610dd5565b915061116083610dd5565b9250828201905080821115611178576111776110b8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006111b882610dd5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111ea576111e96110b8565b5b600182019050919050565b600082825260208201905092915050565b7f5072696365206d75737420626520706f73697469766500000000000000000000600082015250565b600061123c6016836111f5565b915061124782611206565b602082019050919050565b6000602082019050818103600083015261126b8161122f565b9050919050565b7f596f75722072656d61696e206d6f6e6579206d757374206265206174206c656160008201527f737420657175616c20746f20746865206c697374696e67206665650000000000602082015250565b60006112ce603b836111f5565b91506112d982611272565b604082019050919050565b600060208201905081810360008301526112fd816112c1565b9050919050565b61130d81610e0e565b82525050565b60006060820190506113286000830186611304565b6113356020830185611304565b6113426040830184610f9e565b949350505050565b61135381610e50565b82525050565b600060808201905061136e6000830187611304565b61137b6020830186611304565b6113886040830185610f9e565b611395606083018461134a565b95945050505050565b7f596f75722072656d61696e206d6f6e6579206d757374206265206174206c656160008201527f737420657175616c20746f207468652073656c6c696e67207072696365000000602082015250565b60006113fa603d836111f5565b91506114058261139e565b604082019050919050565b60006020820190508181036000830152611429816113ed565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611466601f836111f5565b915061147182611430565b602082019050919050565b6000602082019050818103600083015261149581611459565b905091905056fea26469706673582212208af8a5e5c0e299c29137b583018d0fa4131de1c2c8347b658ab782bd870bef7d64736f6c63430008130033";

type NFTMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTMarket__factory extends ContractFactory {
  constructor(...args: NFTMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      NFTMarket & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): NFTMarket__factory {
    return super.connect(runner) as NFTMarket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTMarketInterface {
    return new Interface(_abi) as NFTMarketInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): NFTMarket {
    return new Contract(address, _abi, runner) as unknown as NFTMarket;
  }
}
